
#source "big.input.txt"

	' * struct {
[integer: int, character: char]
} pair (offset 0)
	' * [2]struct {
[employees: [2]struct {
[age: int]
}]
} acme (offset 3)
	' * [8][3]int fibonacci (offset 11)

' Invocation to the main function
call  main
halt


#line	14
 p:
	' Parameters
	' Local variables
	enter	0
	ret	0,0,0

#line	16
 f:
	' Parameters
	' * double r (offset 6)
	' * int e (offset 4)
	' Local variables
	' * double real (offset -4)
	' * char c (offset -5)
	' * int result (offset -7)
	enter	7

#line	20
	push	bp
	pushi	-4
	addi
	push	bp
	pushi	6
	addi
	loadf
	pushf	10.0
	mulf
	storef

#line	21
	push	bp
	pushi	-5
	addi
	pushb	48
	storeb

#line	22
	push	bp
	pushi	4
	addi
	loadi
	pushi	256
	lti
	jz	else 0

#line	23
	push	bp
	pushi	-5
	addi
	push	bp
	pushi	4
	addi
	loadi
	i2b
	storeb

#line	24
	push	bp
	pushi	-7
	addi
	push	bp
	pushi	-5
	addi
	loadb
	b2i
	storei
	jmp	end 1
 else0:

#line	27
	push	bp
	pushi	-7
	addi
	push	bp
	pushi	-4
	addi
	loadf
	f2i
	storei
	jmp	end 1
 end 1:

#line	28
	push	bp
	pushi	-7
	addi
	loadi
	ret	2,7,6

#line	31
 initialize:
	' Parameters
	' Local variables
	' * int i (offset -2)
	enter	2

#line	33
	pusha	11
	pushi	0
	pushi	6
	muli
	addi
	pushi	0
	pushi	2
	muli
	addi
	pushi	0
	storei

#line	34
	pusha	11
	pushi	0
	pushi	6
	muli
	addi
	pushi	1
	pushi	2
	muli
	addi
	pushi	1
	storei

#line	35
	pusha	11
	pushi	0
	pushi	6
	muli
	addi
	pushi	2
	pushi	2
	muli
	addi
	pushi	1
	storei

#line	36
	push	bp
	pushi	-2
	addi
	pushi	1
	storei

#line	37
 condition: 2:
	push	bp
	pushi	-2
	addi
	loadi
	pushi	8
	lti
	jz	end: 3

#line	38
	pusha	11
	push	bp
	pushi	-2
	addi
	loadi
	pushi	6
	muli
	addi
	pushi	0
	pushi	2
	muli
	addi
	pusha	11
	push	bp
	pushi	-2
	addi
	loadi
	pushi	1
	subi
	pushi	6
	muli
	addi
	pushi	1
	pushi	2
	muli
	addi
	outi
	storei

#line	39
	pusha	11
	push	bp
	pushi	-2
	addi
	loadi
	pushi	6
	muli
	addi
	pushi	1
	pushi	2
	muli
	addi
	pusha	11
	push	bp
	pushi	-2
	addi
	loadi
	pushi	1
	subi
	pushi	6
	muli
	addi
	pushi	2
	pushi	2
	muli
	addi
	outi
	storei

#line	40
	pusha	11
	push	bp
	pushi	-2
	addi
	loadi
	pushi	6
	muli
	addi
	pushi	2
	pushi	2
	muli
	addi
	pusha	11
	push	bp
	pushi	-2
	addi
	loadi
	pushi	6
	muli
	addi
	pushi	0
	pushi	2
	muli
	addi
	outi
	pusha	11
	push	bp
	pushi	-2
	addi
	loadi
	pushi	6
	muli
	addi
	pushi	1
	pushi	2
	muli
	addi
	outi
	addi
	storei

#line	41
	push	bp
	pushi	-2
	addi
	push	bp
	pushi	-2
	addi
	loadi
	pushi	1
	addi
	storei
	jmp	condition: 2
 end: 3:
	ret	0,2,0

#line	47
 main:
	' Parameters
	' Local variables
	' * int i (offset -2)
	' * int j (offset -4)
	enter	4

#line	49
call p

#line	50
	push	bp
	pushi	-2
	addi
	pushi	0
	storei

#line	51
	pusha	0
	pushi	2
	addi
	pushb	48
	storeb

#line	52
	pusha	0
	pushi	0
	addi
	pushb	48
	b2i
	storei

#line	55

' Write
	push	bp
	pushi	-2
	addi
	loadi
	i2f
	pusha	0
	pushi	2
	addi
	loadb
	b2i
call f
	outi

#line	55

' Write
	pushb	10
	outb

#line	56
	pushf	1.3
	pushi	2
call f
	popi

#line	58
call initialize

#line	59
	push	bp
	pushi	-2
	addi
	pushi	0
	storei

#line	60
 condition: 4:
	push	bp
	pushi	-2
	addi
	loadi
	pushi	8
	lti
	jz	end: 5

#line	62

' Write
	pushb	40
	outb

#line	62

' Write
	push	bp
	pushi	-2
	addi
	loadi
	pushi	1
	addi
	outi

#line	62

' Write
	pushb	41
	outb

#line	62

' Write
	pusha	11
	push	bp
	pushi	-2
	addi
	loadi
	pushi	6
	muli
	addi
	pushi	0
	pushi	2
	muli
	addi
	outi
	outi

#line	62

' Write
	pushb	43
	outb

#line	62

' Write
	pusha	11
	push	bp
	pushi	-2
	addi
	loadi
	pushi	6
	muli
	addi
	pushi	1
	pushi	2
	muli
	addi
	outi
	outi

#line	62

' Write
	pushb	61
	outb

#line	62

' Write
	pusha	11
	push	bp
	pushi	-2
	addi
	loadi
	pushi	6
	muli
	addi
	pushi	2
	pushi	2
	muli
	addi
	outi
	outi

#line	62

' Write
	pushb	10
	outb

#line	65
	push	bp
	pushi	-2
	addi
	push	bp
	pushi	-2
	addi
	loadi
	pushi	1
	addi
	storei
	jmp	condition: 4
 end: 5:

#line	68
	pusha	3
	pushi	1
	pushi	4
	muli
	addi
	pushi	0
	addi
	pushi	1
	pushi	2
	muli
	addi
	pushi	0
	addi
	pushi	56
	storei

#line	70

' Write
	pusha	3
	pushi	1
	pushi	4
	muli
	addi
	pushi	0
	addi
	pushi	1
	pushi	2
	muli
	addi
	pushi	0
	addi
	loadi
	outi

#line	70

' Write
	pushb	10
	outb

#line	71
	push	bp
	pushi	-2
	addi
	pushi	0
	storei

#line	72
 condition: 6:
	push	bp
	pushi	-2
	addi
	loadi
	pushi	2
	lti
	jz	end: 7

#line	73
	push	bp
	pushi	-4
	addi
	pushi	0
	storei

#line	74
 condition: 8:
	push	bp
	pushi	-4
	addi
	loadi
	pushi	2
	lti
	jz	end: 9

#line	75
	pusha	3
	push	bp
	pushi	-2
	addi
	loadi
	pushi	4
	muli
	addi
	pushi	0
	addi
	push	bp
	pushi	-4
	addi
	loadi
	pushi	2
	muli
	addi
	pushi	0
	addi
	push	bp
	pushi	-2
	addi
	loadi
	push	bp
	pushi	-4
	addi
	loadi
	addi
	storei

#line	76
	push	bp
	pushi	-4
	addi
	push	bp
	pushi	-4
	addi
	loadi
	pushi	1
	addi
	storei
	jmp	condition: 8
 end: 9:

#line	78
	push	bp
	pushi	-2
	addi
	push	bp
	pushi	-2
	addi
	loadi
	pushi	1
	addi
	storei
	jmp	condition: 6
 end: 7:

#line	81
	push	bp
	pushi	-2
	addi
	pushi	0
	storei

#line	82
 condition: 10:
	push	bp
	pushi	-2
	addi
	loadi
	pushi	2
	lti
	jz	end: 11

#line	83
	push	bp
	pushi	-4
	addi
	pushi	0
	storei

#line	84
 condition: 12:
	push	bp
	pushi	-4
	addi
	loadi
	pushi	2
	lti
	jz	end: 13

#line	86

' Write
	pusha	3
	push	bp
	pushi	-2
	addi
	loadi
	pushi	4
	muli
	addi
	pushi	0
	addi
	push	bp
	pushi	-4
	addi
	loadi
	pushi	2
	muli
	addi
	pushi	0
	addi
	loadi
	outi

#line	86

' Write
	pushb	32
	outb

#line	87
	push	bp
	pushi	-4
	addi
	push	bp
	pushi	-4
	addi
	loadi
	pushi	1
	addi
	storei
	jmp	condition: 12
 end: 13:

#line	89
	push	bp
	pushi	-2
	addi
	push	bp
	pushi	-2
	addi
	loadi
	pushi	1
	addi
	storei
	jmp	condition: 10
 end: 11:
	ret	0,4,0
